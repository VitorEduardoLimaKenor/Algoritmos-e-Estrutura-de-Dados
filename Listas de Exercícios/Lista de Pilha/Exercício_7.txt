/** 7) Faça uma função para retornar o número de elementos da pilha que
    possuem valor par e o número de elementos com valor ímpar.   **/

Função criada para a conclusão do exercício, autores Vitor Eduardo e Mayara Rodrigues:

void par_impar(Pilha* pi){
    /// Verificando se a pilha existe
    if(pi == NULL){
        return;
    }
    /// Criando um no para pegar as informações da pilha
    Elem* no = *pi;
    /// Criando uma váriavel para saber a quantidade de pares
    int qtd_par = 0;
    /// Criando uma váriavel para saber a quantidade de impares
    int qtd_impar = 0;
    /// Percorrendo a pilha
    while(no != NULL){
        if(no->dados.matricula % 2 == 0){
            qtd_par++;
        }
        else{
            qtd_impar++;
        }
        /// Passando para o proximo no
        no = no->prox;
    }
    /// Apresentando as informacoes
        printf("Quantidade de numeros pares na matricula: %i \n", qtd_par);
        printf("Quantidade de numeros impares na matricula: %i\n\n", qtd_impar);

    return;
}