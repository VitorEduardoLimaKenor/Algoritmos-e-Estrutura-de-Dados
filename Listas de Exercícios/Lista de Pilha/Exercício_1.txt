/** 1) Faça um programa que tenha uma nova função chamada pop2() para
    desempilhar dois elementos da pilha e uma outra função chamada
    push2() para empilhar 2 elementos a partir do topo da pilha. Não devem
    ser utilizadas as funções de push e pop já existentes. **/

Função criada para a conclusão do exercício, autores Vitor Eduardo e Mayara Rodrigues:

void pop2(Pilha* pi){
    /// Verificando se a pilha foi criada
    if(pi == NULL){
        return;
    }
    /// Verificando se existe algum elemento na pilha
    if((*pi) == NULL){
        return;
    }
    /** Faço um ponteiro temporário para pegar o elemento do topo,
        depois passo o topo para o próximo elemento, e removo o antigo topo **/
    Elem *no = *pi;
    *pi = no->prox;
    free(no);
    /// Verifico se o novo topo é um elemento
    if((*pi) == NULL){
        return;
    }
    /// Repitindo o passo de remoção anterior
    no = *pi;
    *pi = no->prox;
    free(no);
}

void push2(Pilha* pi, struct aluno al1, struct aluno al2){
    /// Verificando se a pilha foi criada
    if(pi == NULL){
        return;
    }
    /// Criando um no e alocando ele na memória
    Elem* no1;
    no1 = (Elem*) malloc(sizeof(Elem));
    /// Verifico se meu no foi criado
    if(no1 == NULL){
        return;
    }
    /** Atribuo os dados ao meu no,
        Faço ele apontar para o meu antigo no se existir,
        Torno esse no meu novo topo **/
    no1->dados = al1;
    no1->prox = (*pi);
    *pi = no1;

    /// Repito o processo anterior para meu novo no
    Elem* no2;
    no2 = (Elem*) malloc(sizeof(Elem));

    if(no2 == NULL){
        return;
    }

    no2->dados = al2;
    no2->prox = (*pi);
    *pi = no2;
}