/** 3) Faça um programa que utilizando apenas as funções desenvolvidas
    para a pilha, implemente uma função que receba uma pilha como
    parâmetro e retorna como resultado uma cópia dessa pilha. Essa função
    deve obedecer ao protótipo:
    Pilha *pilha_copia (Pilha* p);
    Obs.: Ao final da função copia_pilha, a pilha p recebida como parâmetro
    deve estar no mesmo estado em que ela começou a função. **/


Função criada para a conclusão do exercício, autores Vitor Eduardo e Mayara Rodrigues:

Pilha *pilha_copia(Pilha* pi){
    /// Verificando se a pilha tem algum elemento
    if((*pi) == NULL){
        return NULL;
    }
    /** Criando um no para pegar as informações da Pilha original
        e outro para salvar essas informações na pilha temporária,
        e posteriormente na copia **/
    Elem* no = *pi;
    Elem* no_cop;
    /// Iniciando a pilha temporária que será o inverso da original
    Elem* pi_temp = NULL;
    /** Inicializando a pilha cópia que será o inverso da temorária,
        logo é uma cópia da original **/
    Pilha* pi_cop = (Pilha*) malloc(sizeof(Pilha));
    if(pi_cop != NULL){
        *pi_cop = NULL;
    }
    /// Criando váriavel para excluir a pilha temporária após o uso
    Elem* delet_no;
    /// Copiando os dados da pilha original para a temporária
    while(no != NULL){
        no_cop = (Elem*) malloc(sizeof(Elem));
        if(no_cop == NULL){
            return NULL;
        }
        no_cop->dados = no->dados;
        no_cop->prox = pi_temp;
        pi_temp = no_cop;

        no = no->prox;
    }
    /** Copiando os dados da pilha temporária para a cópia, 
        e excluindo a pilha temporária **/
    while(pi_temp != NULL){
        no_cop = (Elem*) malloc(sizeof(Elem));
        if(no_cop == NULL){
            return NULL;
        }
        no_cop->dados = pi_temp->dados;
        no_cop->prox = (*pi_cop);
        *pi_cop = no_cop;

        delet_no = pi_temp;
        pi_temp = pi_temp->prox;
        free(delet_no);
    }
    
    return pi_cop;
}