/** 2) Faça duas funções recursivas. A primeira deve remover um nó da lista
    encadeada a partir do seu valor armazenado (ex: int info). A segunda
    deve receber duas listas encadeadas e verificar se elas são iguais.  **/


Função criada para a conclusão do exercício, autores Vitor Eduardo e Mayara Rodrigues:

int remove_no(Lista* li, int mat){
    /// Verifica se a lista existe e se tem conteudo
    if(li == NULL || (*li) == NULL){
        return 0;
    }
    /// Criando um no que ira ficar um passo atras
    Elemento* ant = *li;
    /// Criando um no que ficara a frente
    Elemento* no = ant->prox;
    /// Verifica se o no inicial e o que esta sendo procurado
    if(ant->dados.matricula == mat){
        *li = no;
        free(ant);
        return 1;
    }
    else{
        /// Caso de parada
        if(no->dados.matricula == mat){
            ant->prox = no->prox;
            free(no);
            return 1;
        }else{ /// recursao
            ant = ant->prox;
            return remove_no(&ant, mat);
        }
    }
}

int listas_iguais(Lista* L1, Lista* L2){
    /// Verifica se as listas tem o mesmo tamanho
    if(tamanho_lista(L1) != tamanho_lista(L2)){
        return 0;
    }
    /// Criando no's para fazer as comparações
    Elemento* n1 = *L1;
    Elemento* n2 = *L2;
    /// caso de parada
    if(n1 == NULL && n2 == NULL){
        return 1;
    }else{ /// recursao
        /// verifica se tem as mesmas infos
        if(n1->dados.matricula != n2->dados.matricula){
            return 0;
        }
        n1 = n1->prox;
        n2 = n2->prox;
        return listas_iguais(&n1, &n2);
    }
}
